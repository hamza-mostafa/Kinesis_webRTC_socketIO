AWSTemplateFormatVersion: '2010-09-09'
Description: Speed Connect â€“ KVS WebRTC, ECS Fargate, Redis

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC for ECS/Redis
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for ECS/Redis
  BackendImage:
    Type: String
    Description: ECR Image URI for backend
  MongoUrl:
    Type: String
    Description: MongoDB connection string

Resources:
  # Security Groups ==========================================
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Redis security group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - FromPort: 6379
          ToPort: 6379
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ECSSecurityGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ECS Security Group"
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # Redis Cluster ============================================
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "Redis subnet group"
      SubnetIds: !Ref Subnets

  RedisCluster:
    Type: AWS::ElastiCache::ReplicationGroup  # Changed from CacheCluster
    Properties:
      ReplicationGroupId: speedconnect-redis
      ReplicationGroupDescription: "Redis cluster"
      CacheNodeType: cache.t3.micro
      Engine: redis
      AutomaticFailoverEnabled: false
      NumCacheClusters: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup

  # ECS Cluster ==============================================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: speedconnect-ecs
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # IAM Role =================================================
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ServiceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesisvideo:GetSignalingChannelEndpoint
                  - kinesisvideo:ConnectAsMaster
                  - kinesisvideo:ConnectAsViewer
                Resource: !Sub "arn:aws:kinesisvideo:${AWS::Region}:${AWS::AccountId}:channel/*"
              - Effect: Allow
                Action:
                  - elasticache:Connect
                Resource: !Sub "arn:aws:elasticache:${AWS::Region}:${AWS::AccountId}:replicationgroup:${RedisCluster}"

  # Task Definition ==========================================
  BackendTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: speedconnect-backend
      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ECSRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Ref BackendImage
          PortMappings:
            - ContainerPort: 4000
              Protocol: tcp
          Environment:
            - Name: REDIS_URL
              Value: !Sub "redis://${RedisCluster.PrimaryEndPoint.Address}:6379"  # Updated reference
            - Name: KVS_CHANNEL_ARN
              Value: !Ref KvsChannel
            - Name: MONGO_URI
              Value: !Ref MongoUrl

  # ECS Service ==============================================
  BackendService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BackendTaskDef
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref ECSSecurityGroup  # Added security group
          AssignPublicIp: DISABLED  # Better security practice

Outputs:
  RedisEndpoint:
    Value: !GetAtt RedisCluster.PrimaryEndPoint.Address
  KvsChannelArn:
    Value: !Ref KvsChannel
  BackendServiceName:
    Value: !Ref BackendService
  ECSClusterName:
    Value: !Ref ECSCluster